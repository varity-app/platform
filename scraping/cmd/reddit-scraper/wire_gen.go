// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"context"
	"github.com/go-redis/redis/v8"
	"github.com/varity-app/platform/scraping/internal/data/kafka"
	"github.com/varity-app/platform/scraping/internal/scrapers"
	"github.com/varity-app/platform/scraping/internal/scrapers/reddit/live"
	"github.com/vartanbeno/go-reddit/v2/reddit"
)

// Injectors from wire.go:

func initSubmissionsScraper(ctx context.Context, redditCredentials reddit.Credentials, rdb *redis.Client) (*live.RedditSubmissionsScraper, error) {
	memory, err := scrapers.NewMemory(ctx, rdb)
	if err != nil {
		return nil, err
	}
	redditSubmissionsScraper, err := live.NewRedditSubmissionsScraper(redditCredentials, memory)
	if err != nil {
		return nil, err
	}
	return redditSubmissionsScraper, nil
}

func initCommentsScraper(ctx context.Context, redditCredentials reddit.Credentials, rdb *redis.Client) (*live.RedditCommentsScraper, error) {
	memory, err := scrapers.NewMemory(ctx, rdb)
	if err != nil {
		return nil, err
	}
	redditCommentsScraper, err := live.NewRedditCommentsScraper(redditCredentials, memory)
	if err != nil {
		return nil, err
	}
	return redditCommentsScraper, nil
}

func initPublisher(ctx context.Context, opts kafka.PublisherOpts) (*kafka.Publisher, error) {
	publisher, err := kafka.NewPublisher(opts)
	if err != nil {
		return nil, err
	}
	return publisher, nil
}
